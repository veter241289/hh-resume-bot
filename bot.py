import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from utils.parser import parse_hh
from utils.pdf_generator import create_beautiful_pdf

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
from config import TOKEN

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
user_data = {}
tracked_resumes = {}  # {user_id: {resume_id: True}}

# –ö–Ω–æ–ø–∫–∏
def get_city_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üèô –ú–æ—Å–∫–≤–∞", callback_data='city_1')],
        [InlineKeyboardButton("üåÜ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data='city_2')],
        [InlineKeyboardButton("üè∞ –ö–∞–∑–∞–Ω—å", callback_data='city_3')],
        [InlineKeyboardButton("üåç –î—Ä—É–≥–æ–π", callback_data='city_other')]
    ])

def get_experience_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë∂ –ë–µ–∑ –æ–ø—ã—Ç–∞", callback_data='exp_0')],
        [InlineKeyboardButton("üë∑ –û—Ç 1 –≥–æ–¥–∞", callback_data='exp_1')],
        [InlineKeyboardButton("üõ† –û—Ç 3 –ª–µ—Ç", callback_data='exp_3')],
        [InlineKeyboardButton("üèÜ –û—Ç 6 –ª–µ—Ç", callback_data='exp_6')]
    ])

def get_back_or_cancel_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='action_back'),
         InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='action_cancel')]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data[user_id] = {}
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–µ–∑—é–º–µ –Ω–∞ hh.ru. –í–≤–µ–¥–∏—Ç–µ /search –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    await update.message.reply_text("‚è≥ –Ø —Ç–∞–∫–∂–µ –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–∑—é–º–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ /search
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data[user_id] = {}
    await update.message.reply_text("üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=get_city_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if data.startswith('city_'):
        city = data.split('_')[1]
        user_data[user_id]['city'] = city
        await query.message.reply_text("üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç:")
        user_data[user_id]['awaiting'] = 'age_from'
        user_data[user_id]['step_history'] = ['city']

    elif data.startswith('exp_'):
        exp = data.split('_')[1]
        user_data[user_id]['experience'] = exp
        await query.message.reply_text("üí∞ –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (–≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50000):")
        user_data[user_id]['awaiting'] = 'salary'
        user_data[user_id]['step_history'].append('experience')

    elif data == 'gender_m':
        user_data[user_id]['gender'] = '1'
        await query.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –Ω–∞–≤—ã–∫–∏):")
        user_data[user_id]['awaiting'] = 'keyword'
        user_data[user_id]['step_history'].append('gender')

    elif data == 'gender_f':
        user_data[user_id]['gender'] = '2'
        await query.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –Ω–∞–≤—ã–∫–∏):")
        user_data[user_id]['awaiting'] = 'keyword'
        user_data[user